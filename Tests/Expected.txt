PatchDefinition(Name="RootAccess-MainOS",VersionFrom="EFIESP\Windows\System32\Boot\mobilestartup.efi")
PatchFile(Path="Windows\System32\sspisrv.dll")
JumpToImport("RpcImpersonateClient")
JumpToReference()
FindPreviousInstruction("PUSH.W")
CreateLabel("CheckLowboxAccess")
Patch
{
	MOVS R1, #1
	STR R1, [R0]
	MOVS R0, #0
	BX LR
}
PatchChecksum()
PatchFile(Path="Windows\System32\NtlmShared.dll")
JumpToExport("MsvpPasswordValidate")
Patch
{
	MOVS R0, #1
	BX LR
}
PatchChecksum()
PatchFile(Path="Windows\System32\pacmanserver.dll")
FindFirstUnicode("GetMaxCountForDeployedApp")
JumpToReference()
FindPreviousInstruction("PUSH.W")
Patch
{
	LDR R1, =0x7FFFFFFF
	STR R1, [R0]
	MOVS R0, #0
	BX LR
}
PatchChecksum()
PatchFile(Path="Windows\System32\mscoree.dll")
JumpToImport("GetModuleFileNameW")
JumpToReference()
FindPreviousInstruction("PUSH.W")
CreateLabel("CompareWithWhiteList")
Patch
{
	MOVS R0, #0
	BX LR
}
PatchChecksum()
PatchFile(Path="Windows\System32\DeploymentExt.dll")
FindFirstUnicode("MaxUnsignedApp")
JumpToReference()
FindValue(0x800413A0)
FindPreviousConditionalJump()
MakeJumpUnconditional()
PatchChecksum()
PatchFile(Path="Windows\System32\ntoskrnl.exe")
JumpToExport("SeAccessCheckWithHint")
CreateLabel("SeAccessCheckWithHint")
FindFunctionCall(R0="ADD R0, SP, #0x7C",R1="MOV R1, R?")
JumpToTarget()
CreateLabel("SepFilterToDiscretionary")
JumpToReference(R0="ADDS R0, R?, #0xD0")
FindPreviousInstruction("PUSH")
FindPreviousInstruction("PUSH")
CreateLabel("SeAccessCheckByType")
FindFunctionCall(R0="ADDS R0, R?, #0xF8",R1="MOV R1, R?",R2="LDR R2, [R?,#0x28]",R3="MOV R3, R?")
JumpToTarget()
CreateLabel("SepConstrainByMandatory")
JumpBack()
JumpBack()
JumpToReference(R1="LDR R1, [R?,#8]")
FindPreviousInstruction("PUSH")
CreateLabel("SepCommonAccessCheckEx")
FindFunctionCall(Result="STR R0, [SP,#0xD4]")
JumpToTarget()
CreateLabel("SepAccessCheckEx")
JumpBack()
JumpBack()
JumpToReference(R0="ADDS R0, R?, #0x130")
FindPreviousInstruction("PUSH")
FindPreviousInstruction("PUSH")
CreateLabel("SepAccessCheckAndAuditAlarm")
FindFunctionCall(R0="LDR R0, [R?,#0x130]",R1="MOV R1, R?",R2="LDR R2, [R?,#0x50]",R3="MOV R3, R?")
JumpToTarget()
CreateLabel("SepConstrainByConstraintMask")
FindNextConditionalJump()
JumpToTarget()
CreateLabel("SepConstrainByConstraintMask_FunctionChunk01")
JumpBack()
JumpBack()
JumpBack()
JumpBack()
FindFunctionCall(R0="ADD R0, SP, #0x88",R1="MOV R1, R?")
JumpToTarget()
CreateLabel("SepMandatoryToDiscretionary")
JumpBack()
FindFunctionCall(Result="STR R0, [SP,#0x70]")
JumpToTarget()
CreateLabel("SepAccessCheck")
JumpToExport("SePrivilegeCheck")
FindFunctionCall()
JumpToTarget()
CreateLabel("SepPrivilegeCheck")
JumpToExport("SeSinglePrivilegeCheck")
CreateLabel("SeSinglePrivilegeCheck")
JumpToExport("ObReferenceObjectByHandleWithTag")
CreateLabel("ObReferenceObjectByHandleWithTag")
JumpToLabel("SeAccessCheckByType")
FindNextValue(0xC0000022)
FindPreviousConditionalJump()
FindPreviousConditionalJump()
FindPreviousConditionalJump()
FindPreviousConditionalJump()
MakeJumpUnconditional()
FindNextValue(0xC0000022)
FindNextValue(0xC0000022)
FindStore()
FindPreviousConditionalJump()
MakeJumpUnconditional()
FindNextValue(0xC0000022)
FindPreviousConditionalJump()
MakeJumpUnconditional()
FindNextValue(0xC0000022)
FindPreviousConditionalJump()
MakeJumpUnconditional()
FindNextValue(0xC0000022)
FindNextInstruction("BNE")
JumpToTarget()
CreateLabel("TargetPatch5")
JumpBack()
FindPreviousInstruction("BEQ")
Patch
{
	B TargetPatch5
}
FindNextValue(0xC0000022)
FindNextConditionalJump()
MakeJumpUnconditional()
FindNextValue(0xC0000022)
FindStore()
FindPreviousConditionalJump()
MakeJumpUnconditional()
FindNextValue(0xC0000022)
JumpToReference()
ClearInstruction()
JumpBack()
FindNextValue(0xC0000022)
JumpToReference()
ClearInstruction()
JumpBack()
JumpToLabel("SepAccessCheckAndAuditAlarm")
FindNextValue(0xC0000022)
FindPreviousConditionalJump()
MakeJumpUnconditional()
FindNextValue(0xC0000022)
FindNextValue(0xC0000022)
FindStore()
CreateLabel("Patch11")
FindNextConditionalJump()
JumpToTarget()
CreateLabel("TargetPatch11")
JumpToLabel("Patch11")
Patch
{
	B TargetPatch11
}
FindNextValue(0xC0000022)
Patch
{
	MOV.W R2, #0
}
JumpToLabel("SepCommonAccessCheckEx")
FindNextInstruction("TST")
FindNextInstruction("TST")
FindPreviousConditionalJump()
ClearInstruction()
JumpToLabel("SeAccessCheckWithHint")
FindNextInstruction("BEQ")
MakeJumpUnconditional()
JumpToLabel("SeSinglePrivilegeCheck")
Patch
{
	MOVS R0, #1
	BX LR
}
JumpToLabel("ObReferenceObjectByHandleWithTag")
FindFunctionCall()
JumpToTarget()
CreateLabel("ObpReferenceObjectByHandleWithTag")
FindInstructionPattern("LDR R?, [R?,#0x74]; CMP R?, #0; BNE ?",InstructionIndex=2)
JumpToTarget()
FindNextConditionalJump()
MakeJumpUnconditional()
JumpToReference()
ClearInstruction()
JumpBack()
JumpBack()
FindNextValue(0xC0000022)
JumpToReference()
ClearInstruction()
JumpToLabel("SepPrivilegeCheck")
Patch
{
	MOVS R0, #1
	BX LR
}
JumpToLabel("SepMandatoryToDiscretionary")
Patch
{
	MOVS R0, #0
	BX LR
}
JumpToLabel("SepAccessCheckEx")
FindNextValue(0x2000000)
CreateLabel("Patch21")
FindNextInstruction("B")
JumpToTarget()
CreateLabel("TargetPatch21")
JumpToLabel("Patch21")
Patch
{
	B TargetPatch21
}
FindNextValue(0xC0000022)
FindNextValue(0xC0000022)
FindPreviousConditionalJump()
MakeJumpUnconditional()
JumpToReference(0)
ClearInstruction()
JumpBack()
JumpToReference(1)
ClearInstruction()
JumpBack()
JumpToReference(2)
ClearInstruction()
JumpBack()
FindNextValue(0xC0000022)
FindPreviousConditionalJump()
MakeJumpUnconditional()
FindNextValue(0xC0000022)
FindNextValue(0xC0000022)
FindPreviousConditionalJump()
MakeJumpUnconditional()
FindNextValue(0xC0000022)
JumpToReference()
ClearInstruction()
JumpToLabel("SepAccessCheck")
FindFunctionCall(R0="LDR R0, [SP,#0x28]")
JumpToTarget()
CreateLabel("SepNormalAccessCheck")
JumpBack()
FindNextInstruction("TST")
FindNextConditionalJump()
ClearInstruction()
FindFunctionCall(R0="MOV R0, R?",R1="MOV R1, R?",R2="MOV R2, R?",R3="LDR R3, [SP,#0x38]")
JumpToTarget()
CreateLabel("SepMaximumAccessCheck")
JumpBack()
FindNextConditionalJump()
ClearInstruction()
FindNextConditionalJump()
ClearInstruction()
FindNextValue(0xC0000022)
JumpToReference(1)
ClearInstruction()
JumpBack()
JumpToReference(2)
ClearInstruction()
JumpBack()
FindNextValue(0xC0000022)
FindPreviousInstruction("MOVS")
FindPreviousInstruction("MOVS")
JumpToReference()
ClearInstruction()
JumpBack()
FindNextValue(0xC0000022)
JumpToReference(CodePattern="BEQ")
ClearInstruction()
JumpBack()
JumpToReference(CodePattern="MOVS; B")
FindPreviousInstruction("B")
JumpToTarget()
CreateLabel("TargetPatch36")
JumpBack()
FindPreviousInstruction("CMP")
Patch
{
	B.W TargetPatch36
}
JumpBack()
JumpToReference(CodePattern="STR; B")
FindPreviousConditionalJump()
MakeJumpUnconditional()
FindPreviousValue(0xC0000022)
FindPreviousConditionalJump()
MakeJumpUnconditional()
JumpToLabel("SepConstrainByMandatory")
FindNextInstruction("BNE")
JumpToTarget()
FindNextInstruction("CBNZ")
JumpToTarget()
CreateLabel("TargetPatch39")
JumpBack()
FindPreviousInstruction("BEQ")
Patch
{
	B TargetPatch39
}
JumpBack()
FindNextInstruction("B")
JumpToTarget()
FindNextInstruction("CBNZ")
JumpToTarget()
CreateLabel("TargetPatch40")
JumpBack()
FindPreviousInstruction("BEQ")
Patch
{
	B TargetPatch40
}
JumpToLabel("SepFilterToDiscretionary")
Patch
{
	MOVS R0, #0
	BX LR
}
JumpToLabel("SepConstrainByConstraintMask_FunctionChunk01")
FindNextInstruction("TST")
FindNextInstruction("CBNZ")
JumpToTarget()
CreateLabel("TargetPatch42")
JumpBack()
FindPreviousInstruction("BEQ")
Patch
{
	B TargetPatch42
}
FindNextInstruction("TST")
FindNextInstruction("CBNZ")
JumpToTarget()
CreateLabel("TargetPatch43")
JumpBack()
FindPreviousInstruction("BEQ")
FindPreviousInstruction("BEQ")
Patch
{
	B TargetPatch43
}
PatchChecksum()
PatchDefinition(Name="SecureBootHack-MainOS",VersionFrom="EFIESP\Windows\System32\Boot\mobilestartup.efi")
PatchFile(Path="Windows\System32\BOOT\winload.efi")
FindFirstAscii("1.3.6.1.4.1.311.61.4.1")
JumpToReference()
FindPreviousInstruction("PUSH.W")
CreateLabel("ImgpValidateImageHash")
Patch
{
	MOVS    R0, #0
	BX      LR
}
PatchChecksum()
PatchFile(Path="Windows\System32\ci.dll")
JumpToImport("PsGetProcessSignatureLevel")
JumpToReference()
CreateLabel("PsGetProcessSignatureLevelWrapper")
JumpToReference()
FindPreviousInstruction("PUSH.W")
CreateLabel("CipReportAndReprieveUMCIFailure")
FindNextInstruction("TST.W")
FindNextConditionalJump()
MakeJumpUnconditional("BNE")
PatchChecksum()
PatchDefinition(Name="SecureBootHack-V1-EFIESP",VersionFrom="EFIESP\Windows\System32\Boot\mobilestartup.efi",RelativePath="EFIESP",RelativeOutputPath="SecureBootHack-V1")
PatchFile(Path="Windows\System32\boot\mobilestartup.efi")
FindFirstAscii("1.3.6.1.4.1.311.61.4.1")
JumpToReference()
FindPreviousInstruction("PUSH.W")
CreateLabel("ImgpValidateImageHash")
Patch
{
	MOVS    R0, #0
	BX      LR
}
FindFirstUnicode("BootDebugPolicyApplied")
JumpToReference()
FindPreviousInstruction("PUSH.W")
CreateLabel("ApplyBootDebugPolicy")
Patch
{
	MOVS    R0, #0
	BX      LR
}
PatchChecksum()
PatchFile(Path="efi\boot\bootarm.efi")
FindFirstAscii("1.3.6.1.4.1.311.61.4.1")
JumpToReference()
FindPreviousInstruction("PUSH.W")
CreateLabel("ImgpValidateImageHash")
Patch
{
	MOVS    R0, #0
	BX      LR
}
PatchChecksum()
PatchDefinition(Name="SecureBootHack-V2-EFIESP",VersionFrom="EFIESP\Windows\System32\Boot\mobilestartup.efi",RelativePath="EFIESP")
PatchFile(Path="Windows\System32\boot\mobilestartup.efi")
FindFirstAscii("MZ")
CreateLabel("ImageBase")
FindFirstAscii("1.3.6.1.4.1.311.61.4.1")
JumpToReference()
FindPreviousInstruction("PUSH.W")
CreateLabel("ImgpValidateImageHash")
Patch
{
	MOVS    R0, #0
	BX      LR
}
FindFirstUnicode("BootDebugPolicyApplied")
JumpToReference()
FindPreviousInstruction("PUSH.W")
CreateLabel("ApplyBootDebugPolicy")
Patch
{
	MOVS    R0, #0
	BX      LR
}
CreateLabel("EnterMassStorageModeShellCode")
FindFirstUnicode("MassStorageFlag")
CreateLabel("MassStorageName")
PatchUnicode("Heathcliff74MSM")
FindFirstBytes("41 E5 C1 A0 CE 73 7F 46 88 EC D4 4F 92 34 50 4A")
CreateLabel("MassStorageGuid")
JumpToLabel("MassStorageName")
JumpToReference()
FindNextInstruction("BL")
JumpToTarget()
CreateLabel("EfiGetVariableVolatile")
FindValue(2)
FindNextConditionalJump()
MakeJumpUnconditional("BEQ")
FindFirstUnicode("\Windows\System32\boot\ui\boot.ums.waiting.bmpx")
JumpToReference()
FindPreviousInstruction("PUSH.W")
CreateLabel("EnterMassStorageMode")
JumpToReference()
Patch
{
	B.W EnterMassStorageModeShellCode
}
CreateLabel(ReturnFromMassStorageMode)
FindFirstValue(0x26000145)
IfNotFoundGo(PatchForSetErrorDone)
FindPreviousInstruction("PUSH.W")
CreateLabel("SetError")
Patch
{
	MOVS    R0, #1
	BX      LR
}
Label "PatchForSetErrorDone":
FindFirstUnicode("DeviceIDVersion")
JumpToReference()
FindNextInstruction("BL")
JumpToTarget()
CreateLabel("EfiSetVariable")
FindFirstAscii("charge: DisplayPowerState protocol successfully loaded")
JumpToReference()
FindPreviousInstruction("PUSH.W")
CreateLabel("InitGraphicsSubsystem")
FindNextInstruction("BL")
JumpToTarget()
CreateLabel("BlpArchQueryCurrentContextType")
JumpBack()
FindNextInstruction("BL")
FindNextInstruction("BL")
FindNextInstruction("BL")
JumpToTarget()
CreateLabel("BlpArchSwitchContext")
JumpBack()
FindNextInstruction("LDR")
JumpToTarget()
CreateLabel("EfiBS")
JumpToLabel("EnterMassStorageModeShellCode")
Patch
{
	MOV R0, PC
	LDR R1, =(ApplyBootDebugPolicy - ImageBase + 8)
	SUB R0, R0, R1
	PUSH {R4-R6}
	SUB SP, SP, #4
	MOV R4, R0
	LDR R3, =(MassStorageName - ImageBase)
	ADD R0, R4, R3
	LDR R3, =(MassStorageGuid - ImageBase)
	ADD R1, R4, R3
	MOVS R2, #3
	MOVS R3, #0
	STR R3, [SP]
	LDR R6, =(EfiSetVariable - ImageBase + 1)
	ADD R5, R4, R6
	BLX R5
	LDR R1, =(BlpArchQueryCurrentContextType - ImageBase + 1)
	ADD R5, R4, R1
	BLX R5
	MOV R6, R0
	CMP R6, #1
	BEQ ContextSwitchDone1
	MOVS R0, #1
	LDR R1, =(BlpArchSwitchContext - ImageBase + 1)
	ADD R5, R4, R1
	BLX R5
	ContextSwitchDone1:
	LDR R0, =(EfiBS - ImageBase)
	ADD R1, R4, R0
	LDR R1, [R1]
	LDR.W R5, [R1,#0xAC]
	ADR R0, VarServicesGuid
	MOVS R1, #0
	MOV R2, SP
	BLX R5
	LDR R5, [SP]
	LDR R5, [R5,#4]
	CMP R5, #0
	BNE PointerFound
	LDR R5, [SP]
	LDR R5, [R5,#8]
	PointerFound:
	BLX R5
	CMP R6, #1
	BEQ ContextSwitchDone2
	MOV R0, R6
	LDR R1, =(BlpArchSwitchContext - ImageBase + 1)
	ADD R5, R4, R1
	BLX R5
	ContextSwitchDone2:
	LDR R6, =(EnterMassStorageMode - ImageBase + 1)
	ADD R5, R4, R6
	BLX R5
	LDR R6, =(ReturnFromMassStorageMode - ImageBase + 1)
	ADD R0, R4, R6
	ADD SP, SP, #4
	POP {R4-R6}
	BX R0
	VarServicesGuid:
	DCD 0xf9085b9d
	DCW 0x9304, 0x40fb
	DCB 0x8f, 0xe0, 0x4a, 0xee, 0x3b, 0x1a, 0x78, 0x4b
}
PatchChecksum()